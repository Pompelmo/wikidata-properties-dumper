// Generated by CoffeeScript 1.10.0
(function() {
  var Q, _, buildBatchRequests, dumpProperties, fs, language, limit, offset, parseWikidataResponses, qreq, ref, total, wikidataGetEntities, writeMissingLangProp, writeOutputs, writeProps,
    slice = [].slice;

  ref = process.argv.slice(2), language = ref[0], total = ref[1], offset = ref[2];

  total || (total = 2400);

  limit = 50;

  offset || (offset = 0);

  Q = require('q');

  qreq = require('qreq');

  fs = require('fs');

  _ = require('./utils');

  dumpProperties = function() {
    var requests;
    requests = buildBatchRequests();
    _.log(requests, 'requests');
    return Q.all(requests).fail(function(err) {
      return _.logRed(err, 'err buildBatchRequests');
    }).spread(parseWikidataResponses).fail(function(err) {
      return _.logRed(err, 'err parseWikidataResponses');
    }).then(writeOutputs).fail(function(err) {
      return _.logRed(err, 'err parseWikidataResponses');
    });
  };

  parseWikidataResponses = function() {
    var args, missing, missingLang, result;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    result = {};
    missing = [];
    missingLang = [];
    args.forEach(function(resp) {
      var enProp, entity, id, ref1, ref2, ref3, results;
      if (resp.body.warning != null) {
        _.logRed(resp.body.warning);
      }
      if (resp.body.entities != null) {
        ref1 = resp.body.entities;
        results = [];
        for (id in ref1) {
          entity = ref1[id];
          if (id[0] === '-') {
            results.push(missing.push(entity.id));
          } else {
            if ((entity.labels != null) && (((ref2 = entity.labels) != null ? ref2[language] : void 0) != null)) {
              results.push(result[id] = entity.labels[language].value);
            } else {
              enProp = (ref3 = entity.labels) != null ? ref3.en.value : void 0;
              if (enProp != null) {
                missingLang.push([entity.id, enProp]);
                results.push(result[id] = enProp);
              } else {
                results.push(missing.push(entity.id));
              }
            }
          }
        }
        return results;
      }
    });
    return [result, missing, missingLang];
  };

  buildBatchRequests = function() {
    var from, i, requests, results, to;
    requests = [];
    from = 1 + offset;
    to = Math.ceil(total / limit);
    (function() {
      results = [];
      for (var i = from; from <= to ? i <= to : i >= to; from <= to ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this).forEach(function(n) {
      var i, ids, ref1, ref2, results;
      ids = (function() {
        results = [];
        for (var i = ref1 = n * limit - (limit - 1), ref2 = n * limit; ref1 <= ref2 ? i <= ref2 : i >= ref2; ref1 <= ref2 ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).map(function(el) {
        return 'P' + el;
      });
      return requests.push(wikidataGetEntities(ids));
    });
    return requests;
  };

  wikidataGetEntities = function(ids, props, format) {
    var languages, pipedIds, pipedLanguages, pipedProps, query;
    if (props == null) {
      props = ['labels'];
    }
    if (format == null) {
      format = 'json';
    }
    languages = ['en'];
    if (language !== 'en') {
      languages.push(language);
    }
    pipedIds = ids.join('|');
    pipedLanguages = languages.join('|');
    pipedProps = props.join('|');
    _.logBlue(query = "https://www.wikidata.org/w/api.php?action=wbgetentities&languages=" + pipedLanguages + "&format=" + format + "&props=" + pipedProps + "&ids=" + pipedIds, 'query');
    return qreq.get(query);
  };

  writeOutputs = function(outputs) {
    var missing, missingLang, result;
    result = outputs[0], missing = outputs[1], missingLang = outputs[2];
    writeProps(result, missing);
    return writeMissingLangProp(missingLang);
  };

  writeProps = function(result, missing) {
    var json;
    _.log(result, 'result');
    _.log(missing, 'missing');
    json = JSON.stringify({
      properties: result,
      missing: missing
    }, null, 4);
    if (offset > 0) {
      return fs.writeFileSync("./properties-" + language + "-" + from + "-" + to + ".json", json);
    } else {
      return fs.writeFileSync("./outputs/properties-" + language + ".json", json);
    }
  };

  writeMissingLangProp = function(missingLang) {
    var jsonLang;
    _.log(missingLang, 'missingLang');
    jsonLang = JSON.stringify({
      language: language,
      missing: missingLang
    }, null, 4);
    fs.writeFileSync("./outputs/missingLangProp-" + language + ".json", jsonLang);
    return _.logGreen('done!');
  };

  dumpProperties();

}).call(this);
